#!/bin/sh
###############################################################
# SPDX-License-Identifier: BSD-2-Clause-Patent
# Copyright (c) 2019 Tomer Eliyahu (Intel)
# This code is subject to the terms of the BSD+Patent license.
# See LICENSE file for more details.
###############################################################

PRPLMESH_BIN_DIR="@INSTALL_PATH@/@CMAKE_INSTALL_BINDIR@"

dbg() {
    [ "$VERBOSE" = "true" ] && echo "$@"
}

err() {
    printf '\033[1;31m'"$@\n"'\033[0m'
}

success() {
    printf '\033[1;32m'"$@\n"'\033[0m'
}

run() {
    dbg "$*"
    "$@" || exit $?
}

killall_program() {
    PROGRAM_NAME=$1
    KILL_SIG=${2:-KILL}
    echo "killing $PROGRAM_NAME ($KILL_SIG)"
    start-stop-daemon -K -s "$KILL_SIG" -x "$PRPLMESH_BIN_DIR"/"$PROGRAM_NAME" > /dev/null 2>&1
}

platform_init() {
    echo "platform init..."
    [ -z "$DATA_IFACE" ] && err "DATA_IFACE not set, abort" && exit 1
    [ -z "$CONTROL_IFACE" ] && err "CONTROL_IFACE not set, abort" && exit 1
    base_mac=46:55:66:77
    bridge_ip=192.168.100.140
    control_ip=192.168.250.140
    
    ip link add @BEEROCKS_BRIDGE_IFACE@ address "${base_mac}:00:00" type bridge
    ip link add wlan0 address "${base_mac}:00:10" type dummy
    ip link add wlan2 address "${base_mac}:00:20" type dummy
    ip link set dev wlan0 up
    ip link set dev wlan2 up
    for iface in wlan0 wlan2 $DATA_IFACE
    do
        echo "add $iface to @BEEROCKS_BRIDGE_IFACE@"
        nmcli d set "$iface" managed no
        ip link set dev "$iface" master @BEEROCKS_BRIDGE_IFACE@
        ip addr flush "$iface"
    done
    ip addr add "$control_ip"/24 dev "$CONTROL_IFACE"
    ip addr add "$bridge_ip"/24 dev @BEEROCKS_BRIDGE_IFACE@
    ip link set @BEEROCKS_BRIDGE_IFACE@ up
}

platform_deinit() {
    echo "platform deinit"
    [ -z "$DATA_IFACE" ] && err "DATA_IFACE not set, abort" && exit 1
    [ -z "$CONTROL_IFACE" ] && err "CONTROL_IFACE not set, abort" && exit 1
    for iface in wlan0 wlan2 $DATA_IFACE
    do
        echo "remove $iface from @BEEROCKS_BRIDGE_IFACE@"
        ip link set dev "$iface" nomaster
        nmcli d set "$iface" managed yes
    done
    ip link del wlan0
    ip link del wlan2
    ip link del @BEEROCKS_BRIDGE_IFACE@
}

prplmesh_platform_db_init() {
    management_mode=${1-Multi-AP-Controller-and-Agent}
    operating_mode=${2-Gateway}
    
    mkdir -p @TMP_PATH@
    {
        echo "management_mode=${management_mode}"
        echo "operating_mode=${operating_mode}"

        # In certification, agent must retry onboarding indefinitely
        echo "certification_mode=1"
        echo "stop_on_failure_attempts=0" 
    } > @TMP_PATH@/prplmesh_platform_db
}

prplmesh_framework_init() {
    echo "prplmesh_framework_init - starting local_bus and ieee1905_transport processes..."
    @INSTALL_PATH@/bin/local_bus &
    @INSTALL_PATH@/bin/ieee1905_transport &

    # This is required for solveing issue which causing meesges not geeting to their destination.
    # For more information see: https://github.com/prplfoundation/prplMesh/pull/1029#issuecomment-608353274
    ebtables -A FORWARD -d 01:80:c2:00:00:13 -j DROP
}

prplmesh_framework_deinit() {
    echo "prplmesh_framework_deinit - killing local_bus and ieee1905_transport processes..."
    killall_program local_bus
    killall_program ieee1905_transport
    ebtables -D FORWARD -d 01:80:c2:00:00:13 -j DROP
}

prplmesh_controller_start() {
    echo "prplmesh_controller_start - start beerocks_controller process..."
    @INSTALL_PATH@/bin/beerocks_controller &
}

prplmesh_controller_stop() {
    echo "prplmesh_controller_stop - stopping beerocks_controller process..."
    killall_program beerocks_controller
}

prplmesh_agent_start() {
    echo "prplmesh_agent_start - start beerocks_agent process..."
    @INSTALL_PATH@/bin/beerocks_agent &
}

prplmesh_agent_stop() {
    echo "prplmesh_agent_stop - stopping beerocks_agent process..."
    killall_program beerocks_agent
    killall_program beerocks_monitor
}

prplmesh_delete_logs() {
    echo "deleting logs"
    rm -rf @BEEROCKS_LOG_FILES_PATH@

    # Relevant only for Linux environment
    rm -rf /tmp/${SUDO_USER:-${USER}}/beerocks/logs
}

prplmesh_watchdog() {
    # Store PIDs of the Controller and Agents
    local CURR_PIDS="$(pgrep 'beerocks_(agent|controller)' | wc -l)"
    local PREV_PIDS="$CURR_PIDS"

    # Make sure there's at least one PID to monitor
    if [ -z "$CURR_PIDS" ]; then
        echo "No controller or agent processes found."
        return
    fi

    # Monitor the number of running processes
    while [ $CURR_PIDS -ge $PREV_PIDS ]; do
        sleep 1
        CURR_PIDS="$(pgrep 'beerocks_(agent|controller)' | wc -l)"
        if [ $CURR_PIDS -gt $PREV_PIDS ]; then
            PREV_PIDS=$CURR_PIDS
        fi
    done
}

roll_logs_function()
{
    ROLL_PROGRESS_DIR="roll_in_progress.lock"
    BACKUP_NAME=beerocks_logs_$(date "+%Y%m%d_%H%M%S").tar.gz

    # Switch into the beerocks logs folder
    cd @BEEROCKS_LOG_FILES_PATH@ || exit

    # Check if log roll already in progress
    if ! mkdir "$ROLL_PROGRESS_DIR"
    then
        echo "Roll already in progress... Exiting..."
        exit 0
    fi

    logFiles=$(find ./*.*.log)
    logFilesCountPreRoll=$(find ./*.*.log | wc -l)
        
    # Send USR1 signals to the beerocks processes to trigger log rolling
    killall_program beerocks_controller USR1
    killall_program beerocks_agent USR1
    killall_program beerocks_monitor USR1

    # Wait for all the modules to create a new file
    rollTimeout=0
    while true; do
        logFilesCountPostRoll=$(find ./*.*.log | wc -l)

        # All modules rolled
        if [ "$logFilesCountPostRoll" -ge $((logFilesCountPreRoll * 2)) ]; then
            break
        fi

        # Timeout after 5 seconds
        if [ $rollTimeout -ge 5 ]; then
            break
        fi
        
        rollTimeout=$((rollTimeout + 1))
        sleep 1
    done

    # Pack and remove the log files
    tar czf "$BACKUP_NAME" "$logFiles"
    rm "$logFiles"

    # Keep last 3 archives
    rm "$(find -t ./*.tar.gz | awk 'NR>3')" > /dev/null 2>&1

    # Cleanup
    rm -r $ROLL_PROGRESS_DIR
}

start_function() {
    echo "$0: start"
    [ `id -u` -ne 0 ] && echo "$0: warning - this commands needs root privileges so might not work (are you root?)"

    [ "@BWL_TYPE@" = "DUMMY" -a "$PLATFORM_INIT" = "true" ] && platform_init
    [ "@BTL_TYPE@" = "LOCAL_BUS" ] && prplmesh_framework_init
    case "$PRPLMESH_MODE" in
        CA | ca)
            prplmesh_platform_db_init "Multi-AP-Controller-and-Agent"
            prplmesh_controller_start
            prplmesh_agent_start
            ;;
        C | c)
            prplmesh_platform_db_init "Multi-AP-Controller"
            prplmesh_controller_start
            ;;
        A | a)
            prplmesh_platform_db_init "Multi-AP-Agent" "WDS-Repeater"
            prplmesh_agent_start
            ;;
        * ) err "unsupported mode: $PRPLMESH_MODE"; usage; exit 1 ;;
    esac
}

stop_function() {
    echo "$0: stop"
    [ `id -u` -ne 0 ] && echo "$0: warning - this commands needs root privileges so might not work (are you root?)"

    [ "@BWL_TYPE@" = "DUMMY" -a "$PLATFORM_INIT" = "true" ] && platform_deinit
    [ "@BTL_TYPE@" = "LOCAL_BUS" ] && prplmesh_framework_deinit
    prplmesh_controller_stop
    prplmesh_agent_stop
    [ "$DELETE_LOGS" = "true" ] && prplmesh_delete_logs
}

# Note: Apparently on some Linux version space is added to the process name.
# Therefore added "($|[[:blank:]])" to the end of the regex expression which means the end of the 
# line ($) or blank character ([[:blank:]])
main_agent_operational() {
    pgrep -fx "@INSTALL_PATH@/bin/beerocks_agent($|[[:blank:]])" > /dev/null 2>&1 || return 1
    grep -q 'CONNECTED --> OPERATIONAL' "$1/beerocks_agent@BEEROCKS_LOG_FILES_SUFFIX@"
}

radio_agent_operational() {
    pgrep -fx "@INSTALL_PATH@/bin/beerocks_agent -i $2($|[[:blank:]])" > /dev/null 2>&1 || return 1
    grep -q 'goto STATE_OPERATIONAL' "$1/beerocks_agent_$2@BEEROCKS_LOG_FILES_SUFFIX@"
}

report() {
    msg="$1"; shift
    if "$@"; then
        success "OK $msg"
    else
        err "FAIL $msg"
        error=1
    fi
}

status_function() {
    echo "$0: status"

    pgrep -l beerocks
    pgrep -l ieee1905_transport
    pgrep -l local_bus

    # check for operational status
    LOGS_PATH=@BEEROCKS_LOG_FILES_PATH@

    error=0
    report "Main agent operational" main_agent_operational $LOGS_PATH
    report "@BEEROCKS_WLAN1_IFACE@ radio agent operational" radio_agent_operational $LOGS_PATH @BEEROCKS_WLAN1_IFACE@
    report "@BEEROCKS_WLAN2_IFACE@ radio agent operational" radio_agent_operational $LOGS_PATH @BEEROCKS_WLAN2_IFACE@

    [ "$VERBOSE" = "true" -a $error = 1 ] && {
        cat $LOGS_PATH/beerocks_agent@BEEROCKS_LOG_FILES_SUFFIX@
        cat $LOGS_PATH/beerocks_agent_@BEEROCKS_WLAN1_IFACE@@BEEROCKS_LOG_FILES_SUFFIX@
        cat $LOGS_PATH/beerocks_agent_@BEEROCKS_WLAN2_IFACE@@BEEROCKS_LOG_FILES_SUFFIX@
    }

    exit $error
}

usage() {
    echo "usage: $(basename $0) {start|stop|restart|status|roll_logs} [-hvpmdCD]"
}

main() {
    OPTS=`getopt -o 'hvm:pdC:D:'  -n 'parse-options' \
        --long 'verbose,help,mode:,platform-init,delete-logs,iface-ctrl,iface-data' \
        -- "$@"`

    if [ $? != 0 ] ; then err "Failed parsing options." >&2 ; usage; exit 1 ; fi

    eval set -- "$OPTS"

    while true; do
        case "$1" in
            -v | --verbose)       VERBOSE=true; shift ;;
            -h | --help)          usage; exit 0; shift ;;
            -m | --mode)          PRPLMESH_MODE="$2"; shift; shift ;;
            -p | --platform-init) PLATFORM_INIT=true; shift ;;
            -d | --delete-logs)   DELETE_LOGS=true; shift ;;
            -C | --iface-ctrl)    CONTROL_IFACE="$2"; shift; shift ;;
            -D | --iface-data)    DATA_IFACE="$2"; shift; shift ;;
            -- ) shift; break ;;
            * ) err "unsupported argument $1"; usage; exit 1 ;;
        esac
    done

    dbg VERBOSE=$VERBOSE
    dbg PLATFORM_INIT=$PLATFORM_INIT
    dbg DELETE_LOGS=$DELETE_LOGS

    case $1 in
        "start")
            start_function
            ;;
        "start_wait")
            start_function
            prplmesh_watchdog
            stop_function
            ;;
        "stop")
            stop_function
            ;;
        "restart")
            stop_function
            start_function
            ;;
        "status")
            status_function
            ;;
        "roll_logs")
            roll_logs_function
	    return $?
            ;;
        *)
            err "unsupported argument \"$1\""; usage; exit 1 ;;
    esac

    # Give write permissions (linux only)
    if [ "@TARGET_PLATFORM@" = "linux" ]; then
        chmod -R +o+w /tmp/${SUDO_USER:-${USER}}
    fi
}

VERBOSE=false
PLATFORM_INIT=@BEEROCKS_PLATFORM_INIT@
DELETE_LOGS=false
CONTROL_IFACE=
DATA_IFACE=
PRPLMESH_MODE="CA" # CA = Controller & Agent, A = Agent only, C = Controller only

# Export MultiAP libs folder
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:@INSTALL_PATH@/lib

main $@
