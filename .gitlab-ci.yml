.in-prplmesh-builder:
  image:
    name: prplfoundationinc/prplmesh-builder:ubuntu-18.04
    entrypoint: [""]
  tags:
    - docker

build-in-docker:
  extends: .in-prplmesh-builder
  stage: build
  variables:
    CMAKE_BUILD_TYPE: "Release"
  script:
    # Run clang-format and check there are no modified files by checking git status
    - ./clang-format.sh
    - git diff-index --exit-code HEAD
    - cmake -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=build/install -H. -Bbuild -G Ninja
    - ninja -C build install
    # Check that the AutoGenerated files are correct by checking git status
    - git update-index -q --refresh
    - git diff-index --exit-code HEAD

  artifacts:
    paths:
      - build/install

.run-test-in-docker:
  stage: test
  extends: .in-prplmesh-builder
  script:
    - cd build/install
    - ./bin/tests/${CI_JOB_NAME}
  needs:
    - job: build-in-docker
  # TODO log to stdout instead of all the following
  after_script:
    - mkdir -p logs
    - ls -l /tmp # Temporary for debug
    - cp /tmp/${USER}/beerocks/logs/${CI_JOB_NAME}.log logs
  artifacts:
    paths:
      - logs
    when: always

tlvf_test:
  extends: .run-test-in-docker

run-tests:
  stage: test
  image: $CI_REGISTRY_IMAGE/tests-runner:18.09.7-dind
  script:
    - cd tools/docker
    # Try to pull from dockerhub, build the container images if that fails
    - ./image-pull.sh || ./image-build.sh
    - ./tests/test_flows.sh -v

  artifacts:
    paths:
      - logs
    when: always

  tags:
    - docker
    - docker-build

  after_script:
    - tools/docker/stop.sh -k -r
  needs:
    - job: build-in-docker

.build-for-openwrt:
  stage: build
  script:
    - cd tools/docker/builder/openwrt
    - ./build.sh -v -d "$TARGET_DEVICE" -t "prplmesh-builder-$TARGET_DEVICE:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID" 2>&1 | tee build.log | grep '^make\[[12]\]\|^Step\|^ --->' --color=never --line-buffered
  artifacts:
    paths:
      - tools/docker/builder/openwrt/*.ipk
      - tools/docker/builder/openwrt/build.log
    when: always
  tags:
    - shell
    - docker-build

.test-on-target:
  stage: test
  before_script:
    # we need a list of all the targets to be able to kill them
    - ALL_TARGETS="turris-omnia-1 glinet-b1300-1 netgear-rax40-1"
    # kill prplmesh on each target to make sure they don't interfere with the test
    - for i in $ALL_TARGETS ; do ssh "$i" 'pgrep -f beerocks | xargs kill -9 2>/dev/null' || true ; done
  script:
    - tools/deploy_ipk.sh $TARGET_DEVICE_NAME tools/docker/builder/openwrt/*.ipk
    - tools/docker/tests/openwrt/test_status.sh $TARGET_DEVICE_NAME
  artifacts:
    paths:
      - ${TARGET_DEVICE_NAME}_logs.tar.gz
      - ${TARGET_DEVICE_NAME}_diags.log
    when: always
  tags:
    - targets

build-for-turris-omnia:
  extends: .build-for-openwrt
  variables:
    TARGET_DEVICE: "turris-omnia"

build-for-glinet-b1300:
  extends: .build-for-openwrt
  variables:
    TARGET_DEVICE: "glinet-b1300"

build-for-netgear-rax40:
  extends: .build-for-openwrt
  variables:
    TARGET_DEVICE: "netgear-rax40"

test-on-turris-omnia:
  extends: .test-on-target
  variables:
    TARGET_DEVICE_NAME: turris-omnia-1
  needs: ["build-for-turris-omnia"]

test-on-glinet-b1300:
  extends: .test-on-target
  variables:
    TARGET_DEVICE_NAME: glinet-b1300-1
  needs: ["build-for-glinet-b1300"]

test-on-netgear-rax40:
  extends: .test-on-target
  variables:
    TARGET_DEVICE_NAME: netgear-rax40-1
  needs: ["build-for-netgear-rax40"]
