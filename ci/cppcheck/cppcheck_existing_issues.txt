'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_os_utils.cpp: style: The scope of the variable 'buffer' can be reduced. [variableScope]    char buffer[512];
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_os_utils.cpp: style: The scope of the variable 'pid' can be reduced. [variableScope]    int pid;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_os_utils.cpp: style: The scope of the variable 'buffer' can be reduced. [variableScope]            char buffer[1024]          = {0};
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_os_utils.cpp: performance: Function parameter 'path' should be passed by const reference. [passedByValue]void os_utils::kill_pid(std::string path, std::string file_name)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_os_utils.cpp: performance: Function parameter 'file_name' should be passed by const reference. [passedByValue]void os_utils::kill_pid(std::string path, std::string file_name)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_os_utils.cpp: performance: Function parameter 'path' should be passed by const reference. [passedByValue]bool os_utils::is_pid_running(std::string path, std::string file_name, int *pid_out)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_os_utils.cpp: performance: Function parameter 'path' should be passed by const reference. [passedByValue]bool os_utils::write_pid_file(std::string path, std::string file_name)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_os_utils.cpp: performance: Function parameter 'file_name' should be passed by const reference. [passedByValue]bool os_utils::write_pid_file(std::string path, std::string file_name)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/wan_monitor.cpp: warning: Member variable 'wan_monitor::m_arrNLBuff' is not initialized in the constructor. [uninitMemberVar]wan_monitor::wan_monitor() : m_iNetlinkFD(-1) {}
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/include/bcl/network/socket.h: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]        m_error.clear();
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/include/bcl/beerocks_logging.h: performance: Function parameter 'config_path' should be passed by const reference. [passedByValue]    logging(const std::string config_path = std::string(),
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/include/bcl/network/socket.h: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]    void setPeerMac(std::string mac) { m_peer_mac = mac; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/wan_monitor.cpp: performance: Function parameter 'strWanIfaceName' should be passed by const reference. [passedByValue]wan_monitor::ELinkState wan_monitor::initialize(std::string strWanIfaceName)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/link_metrics/ieee802_3_link_metrics_collector.cpp: style: The scope of the variable 'msg_ptr' can be reduced. [variableScope]            struct nlmsghdr *msg_ptr; /* pointer to current message part */
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_utils.cpp: performance: Function parameter 'val' should be passed by const reference. [passedByValue]int utils::write_to_file(std::string full_path, std::string val)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_version.cpp: performance: Function parameter 'ver' should be passed by const reference. [passedByValue]beerocks::version::version(std::string ver, std::string build_date, std::string build_rev)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_version.cpp: performance: Function parameter 'build_date' should be passed by const reference. [passedByValue]beerocks::version::version(std::string ver, std::string build_date, std::string build_rev)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_version.cpp: performance: Function parameter 'build_rev' should be passed by const reference. [passedByValue]beerocks::version::version(std::string ver, std::string build_date, std::string build_rev)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_config_file.cpp: performance: Function parameter 'config_file_path' should be passed by const reference. [passedByValue]bool config_file::read_master_config_file(std::string config_file_path, sConfigMaster &conf)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_utils.cpp: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]    for (it = list.begin(); it != list.end(); it++) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_config_file.cpp: performance: Function parameter 'config_file_path' should be passed by const reference. [passedByValue]bool config_file::read_slave_config_file(std::string config_file_path, sConfigSlave &conf)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/socket.cpp: performance: Variable 'm_socket' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    m_socket           = s;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/socket.cpp: performance: Variable 'm_socket' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    m_socket    = s;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/socket.cpp: performance: Variable 'm_peer_ip' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    m_peer_ip   = peer_ip;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/socket.cpp: style: The scope of the variable 'i' can be reduced. [variableScope]    unsigned i;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/socket.cpp: performance: Function parameter 'peer_ip' should be passed by const reference. [passedByValue]Socket::Socket(SOCKET s, std::string peer_ip, int port_port, long readTimeout)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/socket.cpp: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]        if (soc == s) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/socket.cpp: style: Unused variable: it [unusedVariable]        std::vector<Socket *>::iterator it;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/network_utils.cpp: style: Condition '!up' is always true [knownConditionTrueFalse]    while (!up) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/network_utils.cpp: style: The scope of the variable 'rtInfo_ret' can be reduced. [variableScope]    int rtInfo_ret;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/network_utils.cpp: style: Local variable 'ecmd' shadows outer variable [shadowVariable]            struct ethtool_cmd ecmd;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_logging.cpp: style: The class 'NetLogger' does not have a constructor although it has private member variables. [noConstructor]class NetLogger : public el::LogDispatchCallback {
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/network_utils.cpp: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]        if (ip_info.iface == iface_name) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_logging.cpp: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]    void enable(const std::string &server, uint16_t port, std::string module_name)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_logging.cpp: performance: Function parameter 'config_path' should be passed by const reference. [passedByValue]logging::logging(const std::string config_path, std::string module_name)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_logging.cpp: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]logging::logging(const std::string config_path, std::string module_name)
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_logging.cpp: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]logging::logging(const beerocks::config_file::SConfigLog &settings, std::string module_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_logging.cpp: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]        str += elt + ", ";
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/network_utils.cpp: information: Skipping configuration 'SIOCBRADDIF' since the value of 'SIOCBRADDIF' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]    err             = ioctl(br_socket_fd, SIOCBRADDIF, &ifr);
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/network/network_utils.cpp: information: Skipping configuration 'SIOCBRDELIF' since the value of 'SIOCBRDELIF' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]    err             = ioctl(br_socket_fd, SIOCBRDELIF, &ifr);
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_ucc_listener.cpp: style: Variable 'command_type_str' can be declared with const [constVariable]    auto &command_type_str = *cmd_tokens_vec.begin();
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_ucc_listener.cpp: style: Parameter 'tlv_hex_list' can be declared with const [constParameter]bool tlvPrefilledData::add_tlvs_from_list(std::list<beerocks_ucc_listener::tlv_hex_t> &tlv_hex_list,
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_ucc_listener.cpp: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]        mandatory_params.push_back(param_name.first);
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/beerocks_ucc_listener.cpp: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]                          validate_binary_notation(value) || validate_decimal_notation(value))) {
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: warning: Member variable 'monitor_sta_node::m_sta_stats' is not initialized in the constructor. [uninitMemberVar]    monitor_sta_node(const int8_t vap_id_, const std::string mac_) { vap_id = vap_id_, mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: warning: Member variable 'monitor_vap_node::m_vap_stats' is not initialized in the constructor. [uninitMemberVar]    monitor_vap_node(const std::string iface_, const int8_t vap_id_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: warning: Member variable 'monitor_radio_node::m_radio_stats' is not initialized in the constructor. [uninitMemberVar]    monitor_radio_node() {}
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Variable 'mac' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    monitor_sta_node(const int8_t vap_id_, const std::string mac_) { vap_id = vap_id_, mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Variable 'iface' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]        iface  = iface_;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'mac_' should be passed by const reference. [passedByValue]    monitor_sta_node(const int8_t vap_id_, const std::string mac_) { vap_id = vap_id_, mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'ip' should be passed by const reference. [passedByValue]    void set_ipv4(std::string ip) { ipv4 = ip; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'bridge_mac_4addr_' should be passed by const reference. [passedByValue]    void set_bridge_4addr_mac(const std::string bridge_mac_4addr_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'iface_' should be passed by const reference. [passedByValue]    monitor_vap_node(const std::string iface_, const int8_t vap_id_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'ap_mac_' should be passed by const reference. [passedByValue]    void set_mac(const std::string ap_mac_) { mac = ap_mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'bridge_iface_' should be passed by const reference. [passedByValue]    void set_bridge_iface(const std::string bridge_iface_) { bridge_iface = bridge_iface_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'bridge_mac_' should be passed by const reference. [passedByValue]    void set_bridge_mac(const std::string bridge_mac_) { bridge_mac = bridge_mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'bridge_ipv4_' should be passed by const reference. [passedByValue]    void set_bridge_ipv4(const std::string bridge_ipv4_) { bridge_ipv4 = bridge_ipv4_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'iface_' should be passed by const reference. [passedByValue]    void set_iface(const std::string iface_) { iface = iface_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.cpp: performance: Function parameter 'iface' should be passed by const reference. [passedByValue]std::shared_ptr<monitor_vap_node> monitor_db::vap_add(const std::string iface, int8_t vap_id)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]monitor_sta_node *monitor_db::sta_find(const std::string sta_mac)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.cpp: performance: Function parameter 'ipv4' should be passed by const reference. [passedByValue]monitor_sta_node *monitor_db::sta_find_by_ipv4(const std::string ipv4)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]monitor_sta_node *monitor_db::sta_add(const std::string sta_mac, const int8_t vap_id)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]void monitor_db::sta_erase(const std::string sta_mac)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.cpp: style: Variable 'sta_stats' can be declared with const [constVariable]    auto &sta_stats = get_stats();
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/son/son_wireless_utils.cpp: style: Condition 'prev_bw<=bw' is always true [knownConditionTrueFalse]    } else if (prev_bw <= bw) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/son/son_wireless_utils.cpp: style: The scope of the variable 'rate_temp' can be reduced. [variableScope]    uint16_t rate_temp;
'/builds/prpl-foundation/prplMesh/common/beerocks/bcl/source/son/son_wireless_utils.cpp: style: The scope of the variable 'diff_temp' can be reduced. [variableScope]    uint16_t diff_temp;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/base_wlan_hal_dummy.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]base_wlan_hal_dummy::base_wlan_hal_dummy(HALType type, std::string iface_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]ap_wlan_hal_dummy::ap_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/agent_ucc_listener.cpp: style: struct member 'sVapElement::backhaul_vap' is never used. [unusedStructMember]    bool backhaul_vap;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp: style: The scope of the variable 'tmp_int' can be reduced. [variableScope]    int64_t tmp_int;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/include/bwl/mon_wlan_hal.h: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]    virtual bool update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats) = 0;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/include/bwl/mon_wlan_hal.h: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]    virtual bool update_stations_stats(const std::string vap_iface_name, const std::string sta_mac,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/include/bwl/mon_wlan_hal.h: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]    virtual bool update_stations_stats(const std::string vap_iface_name, const std::string sta_mac,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]mon_wlan_hal_dummy::mon_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]bool mon_wlan_hal_dummy::update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]bool mon_wlan_hal_dummy::update_stations_stats(const std::string vap_iface_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]                                               const std::string sta_mac, SStaStats &sta_stats)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp: style: struct member 'DUMMY_acs_report_get::Ch' is never used. [unusedStructMember]    int Ch;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp: style: struct member 'DUMMY_acs_report_get::BW' is never used. [unusedStructMember]    int BW;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp: style: struct member 'DUMMY_acs_report_get::DFS' is never used. [unusedStructMember]    int DFS;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp: style: struct member 'DUMMY_acs_report_get::bss' is never used. [unusedStructMember]    int bss;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.h: warning: Member variable 'rdkb_hal_sta_config::vapIndex' is not initialized in the constructor. [uninitMemberVar]    rdkb_hal_sta_config(const std::string mac_) { mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.h: warning: Member variable 'rdkb_hal_sta_config::snrInactXing' is not initialized in the constructor. [uninitMemberVar]    rdkb_hal_sta_config(const std::string mac_) { mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.h: warning: Member variable 'rdkb_hal_sta_config::snrHighXing' is not initialized in the constructor. [uninitMemberVar]    rdkb_hal_sta_config(const std::string mac_) { mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.h: warning: Member variable 'rdkb_hal_sta_config::snrLowXing' is not initialized in the constructor. [uninitMemberVar]    rdkb_hal_sta_config(const std::string mac_) { mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.h: performance: Variable 'mac' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    rdkb_hal_sta_config(const std::string mac_) { mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'iface' should be passed by const reference. [passedByValue]    std::shared_ptr<monitor_vap_node> vap_add(const std::string iface, int8_t vap_id);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]    monitor_sta_node *sta_add(const std::string sta_mac, const int8_t vap_id);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]    void sta_erase(const std::string sta_mac);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]    monitor_sta_node *sta_find(const std::string mac);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_db.h: performance: Function parameter 'ipv4' should be passed by const reference. [passedByValue]    monitor_sta_node *sta_find_by_ipv4(const std::string ipv4);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.cpp: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]        break;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/ap_wlan_hal_dwpal.cpp: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport.h: style: The class 'Ieee1905Transport' does not have a constructor although it has private member variables. [noConstructor]class Ieee1905Transport {
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.h: performance: Function parameter 'mac_' should be passed by const reference. [passedByValue]    rdkb_hal_sta_config(const std::string mac_) { mac = mac_; }
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]std::shared_ptr<rdkb_hal_sta_config> monitor_rdkb_hal::conf_find_client(const std::string sta_mac)
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h: style: The function 'topic' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]    virtual const std::string topic() const
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h: style: The function 'print' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]    virtual std::ostream &print(std::ostream &os) const
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h: style: The function 'topic_prefix' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]    virtual const std::string topic_prefix() const { return kTopicPrefix; }
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h: style: The function 'topic' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]    virtual const std::string topic() const { return topic_prefix(); }
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h: style: C-style pointer casting [cstyleCast]    Metadata *metadata() const { return (Metadata *)frames().back().data(); };
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h: style: C-style pointer casting [cstyleCast]        return (Metadata *)frames().back().data();
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/common/message.h: style: Local variable 'frame' shadows outer function [shadowFunction]        for (auto frame : frames)
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h: style: Local variable 'topic' shadows outer function [shadowFunction]        std::ostringstream topic;
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_config.h: performance: Function parameter 'xsub_secret' should be passed by const reference. [passedByValue]    BrokerSecurity(bool enable, unsigned int key_len, std::string xsub_secret,
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_config.h: performance: Function parameter 'xsub_public' should be passed by const reference. [passedByValue]                   std::string xsub_public, std::string pub_secret, std::string pub_public,
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_config.h: performance: Function parameter 'pub_secret' should be passed by const reference. [passedByValue]                   std::string xsub_public, std::string pub_secret, std::string pub_public,
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_config.h: performance: Function parameter 'pub_public' should be passed by const reference. [passedByValue]                   std::string xsub_public, std::string pub_secret, std::string pub_public,
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_config.h: performance: Function parameter 'xpub_secret' should be passed by const reference. [passedByValue]                   std::string xpub_secret, std::string xpub_public, std::string sub_secret,
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_config.h: performance: Function parameter 'xpub_public' should be passed by const reference. [passedByValue]                   std::string xpub_secret, std::string xpub_public, std::string sub_secret,
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_config.h: performance: Function parameter 'sub_secret' should be passed by const reference. [passedByValue]                   std::string xpub_secret, std::string xpub_public, std::string sub_secret,
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_config.h: performance: Function parameter 'sub_public' should be passed by const reference. [passedByValue]                   std::string sub_public)
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/common/logger.h: performance: Function parameter 'param' should be passed by const reference. [passedByValue]        void set_level(std::string param) { level_ = param; }
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/common/logger.h: performance: Function parameter 'param' should be passed by const reference. [passedByValue]        void set_file_path(std::string param) { file_path_ = param; }
'/builds/prpl-foundation/prplMesh/framework/common/include/mapf/broker/broker_interface.h: performance: Function parameter 'sync_topic' should be passed by const reference. [passedByValue]    BrokerInterface(Context &ctx, const std::string &cfg, std::string sync_topic = "hello")
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h: performance: Function parameter 'prefix' should be passed by const reference. [passedByValue]    static const std::string build_topic(const std::string prefix, uint16_t ether_type,
'/builds/prpl-foundation/prplMesh/common/beerocks/btl/btl_local_bus.cpp: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]        if (!subscribe_topic_to_bus(bus, msg_type)) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dummy/sta_wlan_hal_dummy.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]sta_wlan_hal_dummy::sta_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_rssi.cpp: style: Local variable 'sta_vap_id' shadows outer variable [shadowVariable]            auto sta_vap_id = sta_node->get_vap_id();
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_rssi.cpp: style: Variable 'sta_stats' can be declared with const [constVariable]    auto &sta_stats = sta_node->get_stats();
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_rssi.cpp: style: Variable 'sta_stats' can be declared with const [constVariable]    auto &sta_stats   = sta_node->get_stats();
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/base_wlan_hal_dwpal.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]base_wlan_hal_dwpal::base_wlan_hal_dwpal(HALType type, std::string iface_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/sta_wlan_hal_econet.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]sta_wlan_hal_dummy::sta_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/base_wlan_hal_dwpal.cpp: style: Consider using std::count_if algorithm instead of a raw loop. [useStlAlgorithm]                        attached++;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/base_wlan_hal_econet.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]base_wlan_hal_dummy::base_wlan_hal_dummy(HALType type, std::string iface_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp: style: The scope of the variable 'tmp_int' can be reduced. [variableScope]    int64_t tmp_int;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]ap_wlan_hal_dummy::ap_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]mon_wlan_hal_dummy::mon_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]bool mon_wlan_hal_dummy::update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]bool mon_wlan_hal_dummy::update_stations_stats(const std::string vap_iface_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]                                               const std::string sta_mac, SStaStats &sta_stats)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp: style: struct member 'DUMMY_acs_report_get::Ch' is never used. [unusedStructMember]    int Ch;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp: style: struct member 'DUMMY_acs_report_get::BW' is never used. [unusedStructMember]    int BW;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp: style: struct member 'DUMMY_acs_report_get::DFS' is never used. [unusedStructMember]    int DFS;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/shared/netlink_socket.cpp: style: Local variable 'rc' shadows outer variable [shadowVariable]        int rc = nl_recvmsgs(m_nl_socket.get(), nl_callback.get());
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp: style: struct member 'DUMMY_acs_report_get::bss' is never used. [unusedStructMember]    int bss;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: warning: Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]    if (bpl::dhcp_mon_stop() == false) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp: style: The scope of the variable 'rate_mbs_fp_8_1' can be reduced. [variableScope]    uint8_t rate_mbs_fp_8_1;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp: style: The scope of the variable 'rate_kbs' can be reduced. [variableScope]    uint32_t rate_kbs;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: warning: Member variable 'main_thread::m_uiArpMonIP' is not initialized in the constructor. [uninitMemberVar]main_thread::main_thread(config_file::sConfigSlave config_,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: warning: Member variable 'main_thread::m_uiArpMonMask' is not initialized in the constructor. [uninitMemberVar]main_thread::main_thread(config_file::sConfigSlave config_,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: warning: Member variable 'main_thread::is_onboarding_on_init' is not initialized in the constructor. [uninitMemberVar]main_thread::main_thread(config_file::sConfigSlave config_,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: warning: Member variable 'main_thread::platform_common_conf' is not initialized in the constructor. [uninitMemberVar]main_thread::main_thread(config_file::sConfigSlave config_,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.h: warning: Virtual function 'on_thread_stop' is called from destructor '~main_thread()' at line 312. Dynamic binding is not used. [virtualCallInConstructor]    virtual void on_thread_stop() override;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/mon_wlan_hal_nl80211.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]mon_wlan_hal_nl80211::mon_wlan_hal_nl80211(std::string iface_name, hal_event_cb_t callback)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/mon_wlan_hal_nl80211.cpp: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]bool mon_wlan_hal_nl80211::update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/mon_wlan_hal_nl80211.cpp: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]bool mon_wlan_hal_nl80211::update_stations_stats(const std::string vap_iface_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/mon_wlan_hal_nl80211.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]                                                 const std::string sta_mac, SStaStats &sta_stats)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/ap_wlan_hal_nl80211.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]ap_wlan_hal_nl80211::ap_wlan_hal_nl80211(std::string iface_name, hal_event_cb_t callback,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]mon_wlan_hal_dwpal::mon_wlan_hal_dwpal(std::string iface_name, hal_event_cb_t callback)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]bool mon_wlan_hal_dwpal::update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats)
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]bool mon_wlan_hal_dwpal::update_stations_stats(const std::string vap_iface_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]                                               const std::string sta_mac, SStaStats &sta_stats)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: warning: Redundant assignment of '*(volatile char*)pass' to itself. [selfAssignment]        *(volatile char *)pass = *(volatile char *)pass;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: warning: Redundant assignment of '*(volatile char*)pass' to itself. [selfAssignment]            *(volatile char *)pass = *(volatile char *)pass;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/beerocks_slave_main.cpp: style: Parameter 'beerocks_slave_conf' can be declared with const [constParameter]static void fill_son_slave_config(beerocks::config_file::sConfigSlave &beerocks_slave_conf,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/beerocks_slave_main.cpp: style: Parameter 'beerocks_slave_conf' can be declared with const [constParameter]static int system_hang_test(beerocks::config_file::sConfigSlave &beerocks_slave_conf, int argc,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: performance: Function parameter 'parameter' should be passed by const reference. [passedByValue]std::string extern_query_db(std::string parameter)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: performance: Function parameter 'config_' should be passed by const reference. [passedByValue]main_thread::main_thread(config_file::sConfigSlave config_,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: performance: Function parameter 'op' should be passed by const reference. [passedByValue]void main_thread::send_dhcp_notification(std::string op, std::string mac, std::string ip,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: performance: Function parameter 'op' should be passed by const reference. [passedByValue]    static auto dhcp_monitor_cb_wrapper = [&](std::string op, std::string mac, std::string ip,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]    static auto dhcp_monitor_cb_wrapper = [&](std::string op, std::string mac, std::string ip,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: performance: Function parameter 'ip' should be passed by const reference. [passedByValue]    static auto dhcp_monitor_cb_wrapper = [&](std::string op, std::string mac, std::string ip,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp: performance: Function parameter 'hostname' should be passed by const reference. [passedByValue]                                              std::string hostname) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/base_wlan_hal_nl80211.cpp: style: C-style pointer casting [cstyleCast]                m_fd_ext_events = wpa_ctrl_get_fd((wpa_ctrl *)m_wpa_ctrl_event);
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/shared/nl80211_socket.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (result) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/base_wlan_hal_nl80211.cpp: style: A pointer can not be negative so it is either pointless or an error to check if it is. [pointerLessThanZero]    if (err < 0) {
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/base_wlan_hal_nl80211.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]base_wlan_hal_nl80211::base_wlan_hal_nl80211(HALType type, std::string iface_name,
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/dwpal/sta_wlan_hal_dwpal.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]sta_wlan_hal_dwpal::sta_wlan_hal_dwpal(std::string iface_name, hal_event_cb_t callback)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/beerocks_slave_main.cpp: style: Unused variable: versionfile [unusedVariable]    std::ofstream versionfile;
'/builds/prpl-foundation/prplMesh/common/beerocks/bwl/nl80211/sta_wlan_hal_nl80211.cpp: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]sta_wlan_hal_nl80211::sta_wlan_hal_nl80211(std::string iface_name, hal_event_cb_t callback)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: warning: Member variable 'backhaul_manager::state_attempts' is not initialized in the constructor. [uninitMemberVar]backhaul_manager::backhaul_manager(const config_file::sConfigSlave &config,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: warning: Member variable 'backhaul_manager::selected_bssid_channel' is not initialized in the constructor. [uninitMemberVar]backhaul_manager::backhaul_manager(const config_file::sConfigSlave &config,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: warning: Member variable 'backhaul_manager::roam_selected_bssid_channel' is not initialized in the constructor. [uninitMemberVar]backhaul_manager::backhaul_manager(const config_file::sConfigSlave &config,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: performance: Variable 'pending_slave_ifaces' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    pending_slave_ifaces                   = slave_ap_ifaces_;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.h: warning: Virtual function 'on_thread_stop' is called from destructor '~backhaul_manager()' at line 241. Dynamic binding is not used. [virtualCallInConstructor]    virtual void on_thread_stop() override;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/bml_utils.cpp: style: C-style pointer casting [cstyleCast]        auto event_data = (BML_EVENT_BSS_TM_REQ *)(event->data);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/bml_utils.cpp: style: C-style pointer casting [cstyleCast]        auto event_data = (BML_EVENT_BH_ROAM_REQ *)(event->data);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/bml_utils.cpp: style: C-style pointer casting [cstyleCast]        auto event_data = (BML_EVENT_CLIENT_ALLOW_REQ *)(event->data);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/bml_utils.cpp: style: C-style pointer casting [cstyleCast]        auto event_data = (BML_EVENT_ACS_START *)(event->data);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/bml_utils.cpp: style: C-style pointer casting [cstyleCast]        auto event_data = (BML_EVENT_CSA_NOTIFICATION *)(event->data);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/bml_utils.cpp: style: C-style pointer casting [cstyleCast]        auto event_data = (BML_EVENT_CAC_STATUS_CHANGED_NOTIFICATION *)(event->data);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/bml_utils.cpp: style: C-style pointer casting [cstyleCast]        auto event_data = (BML_EVENT_STEERING *)(event->data);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: style: Local variable 'local_interface_name' shadows outer variable [shadowVariable]        std::string local_interface_name = soc->hostap_iface;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: style: Local variable 'supportedServiceTuple' shadows outer variable [shadowVariable]        auto supportedServiceTuple = tlvSupportedService->supported_service_list(1);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: style: Local variable 'iface_hal' shadows outer variable [shadowVariable]                            auto iface_hal = get_wireless_hal(sta_iface);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]                    if (soc->hostap_iface == config_const_bh_slave) {
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]                if (soc_iter->slave == sd) {
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]            if (vap.second.find(client_info_tlv_r->client_mac()) != vap.second.end()) {
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]                                      link_metrics_type, cmdu_tx)) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/bml.cpp: style: C-style pointer casting [cstyleCast]    bml_internal *pBML = (bml_internal *)ctx;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.h: style: The function 'process_cmdu_header' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]    virtual int process_cmdu_header(std::shared_ptr<beerocks::beerocks_header> beerocks_header);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/rdkb/bml_rdkb.cpp: style: C-style pointer casting [cstyleCast]    bml_rdkb_internal *pBML = (bml_rdkb_internal *)ctx;
'/builds/prpl-foundation/prplMesh/common/beerocks/tlvf/src/src/beerocks_message.cpp: style: Parameter 'cmdu' can be declared with const [constParameter]message::sUdsHeader *message_com::get_uds_header(ieee1905_1::CmduMessage &cmdu)
'/builds/prpl-foundation/prplMesh/common/beerocks/tlvf/src/src/beerocks_message.cpp: style: Parameter 'cmdu_rx' can be declared with const [constParameter]bool message_com::forward_cmdu_to_uds(Socket *sd, ieee1905_1::CmduMessageRx &cmdu_rx,
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp: style: Variable 'p_cmdu_header' is assigned a value that is never used. [unreadVariable]    auto p_cmdu_header =
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_thread.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]        if (poll_last) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_proxy.cpp: performance: Variable 'master_uds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    master_uds  = master_uds_;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_main.cpp: style: Redundant initialization for 'cli_ptr'. The initialized value is overwritten before it is read. [redundantInitialization]    beerocks::cli *cli_ptr = &cli_soc;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_bml.h: performance: Function parameter 'iface' should be passed by const reference. [passedByValue]    int wps_onboarding(const std::string iface = std::string());
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_main.cpp: performance: Function parameter 'temp_path' should be passed by const reference. [passedByValue]static void cli_tcp_proxy(std::string temp_path)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_proxy.cpp: performance: Function parameter 'master_uds_' should be passed by const reference. [passedByValue]cli_proxy::cli_proxy(std::string master_uds_) : socket_thread()
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_main.cpp: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]        cmd += token + " ";
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_main.cpp: style: Variable 'pos' is assigned a value that is never used. [unreadVariable]        } else if ((pos = token->find("!")) != std::string::npos) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_main.cpp: style: Variable 'cli_ptr' is assigned a value that is never used. [unreadVariable]    beerocks::cli *cli_ptr = &cli_soc;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_bml.cpp: performance: Function parameter 'ind' should be passed by const reference. [passedByValue]    const std::string &parent_bssid, const std::string ind, std::stringstream &ss)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_bml.cpp: performance: Function parameter 'beerocks_conf_path_' should be passed by const reference. [passedByValue]cli_bml::cli_bml(std::string beerocks_conf_path_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_thread.cpp: style: Local variable 'time_span' shadows outer variable [shadowVariable]        auto time_span =
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli.cpp: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]         it++) {
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_thread.cpp: style: Variable 'iface' is assigned a value that is never used. [unreadVariable]        std::string iface = radio_node->get_iface();
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/monitor/monitor_thread.cpp: style: Variable 'id' is assigned a value that is never used. [unreadVariable]        int id        = 0;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/node.h: performance: Variable 'timestamp' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]            timestamp = std::chrono::steady_clock::now();
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/node.h: performance: Function parameter 'mac_' should be passed by const reference. [passedByValue]    node(beerocks::eType type_, const std::string mac_);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/node.h: performance: Function parameter 'ap_mac_' should be passed by const reference. [passedByValue]        rssi_measurement(std::string ap_mac_, int8_t rssi_, int8_t packets_) : ap_mac(ap_mac_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/node.h: performance: Function parameter 'ap_mac_' should be passed by const reference. [passedByValue]        beacon_measurement(std::string ap_mac_, int8_t rcpi_, uint8_t rsni_) : ap_mac(ap_mac_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/ap_manager_thread.cpp: warning: Member variable 'ap_manager_thread::wifi_channel' is not initialized in the constructor. [uninitMemberVar]ap_manager_thread::ap_manager_thread(std::string slave_uds_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/ap_manager_thread.cpp: warning: Member variable 'ap_manager_thread::acs_enabled' is not initialized in the constructor. [uninitMemberVar]ap_manager_thread::ap_manager_thread(std::string slave_uds_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/ap_manager_thread.cpp: warning: Member variable 'ap_manager_thread::low_filter' is not initialized in the constructor. [uninitMemberVar]ap_manager_thread::ap_manager_thread(std::string slave_uds_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/ap_manager_thread.cpp: performance: Variable 'slave_uds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    slave_uds   = slave_uds_;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/ap_manager_thread.cpp: performance: Function parameter 'slave_uds_' should be passed by const reference. [passedByValue]ap_manager_thread::ap_manager_thread(std::string slave_uds_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/ap_manager_thread.cpp: style: Parameter 'pending_vap' can be declared with const [constParameter]    pending_disable_vaps.remove_if([&](pending_disable_vap_t &pending_vap) {
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/ap_manager_thread.cpp: style: Redundant checking of STL container element existence before removing it. [redundantIfRemove]                if (connected_ires.find(mac) != connected_ires.end()) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/node.cpp: performance: Function parameter 'mac_' should be passed by const reference. [passedByValue]node::node(beerocks::eType type_, const std::string mac_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.cpp: style: C-style pointer casting [cstyleCast]        event->data = GET_MESSAGE_POINTER(BML_EVENT_STEERING, data_buffer, size);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.cpp: style: Variable 'iRet' is reassigned a value before the old one has been used. [redundantAssignment]    iRet = prmRdkbWlan.get_value();
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/network_map.cpp: style: Parameter 'buffer_size' can be declared with const [constParameter]                                               uint8_t *tx_buffer, std::ptrdiff_t &buffer_size,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/network_map.cpp: style: Variable 'size' is assigned a value that is never used. [unreadVariable]    event->data = GET_MESSAGE_POINTER(BML_EVENT_BSS_TM_REQ, response->buffer(0), size);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/network_map.cpp: style: Variable 'size' is assigned a value that is never used. [unreadVariable]    event->data = GET_MESSAGE_POINTER(BML_EVENT_BH_ROAM_REQ, response->buffer(0), size);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/network_map.cpp: style: Variable 'size' is assigned a value that is never used. [unreadVariable]    event->data = GET_MESSAGE_POINTER(BML_EVENT_CLIENT_ALLOW_REQ, response->buffer(0), size);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/network_map.cpp: style: Variable 'size' is assigned a value that is never used. [unreadVariable]    event->data = GET_MESSAGE_POINTER(BML_EVENT_CLIENT_DISALLOW_REQ, response->buffer(0), size);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/network_map.cpp: style: Variable 'size' is assigned a value that is never used. [unreadVariable]    event->data = GET_MESSAGE_POINTER(BML_EVENT_ACS_START, response->buffer(0), size);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/network_map.cpp: style: Variable 'size' is assigned a value that is never used. [unreadVariable]    event->data = GET_MESSAGE_POINTER(BML_EVENT_CSA_NOTIFICATION, response->buffer(0), size);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/network_map.cpp: style: Variable 'size' is assigned a value that is never used. [unreadVariable]        GET_MESSAGE_POINTER(BML_EVENT_CAC_STATUS_CHANGED_NOTIFICATION, response->buffer(0), size);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/controller_ucc_listener.cpp: style: Variable 'operating_class_str' can be declared with const [constVariable]    auto &operating_class_str = confs[1];
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/controller_ucc_listener.cpp: style: Variable 'authentication_type_str' can be declared with const [constVariable]    auto &authentication_type_str = confs[3];
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/controller_ucc_listener.cpp: style: Variable 'encryption_type_str' can be declared with const [constVariable]    auto &encryption_type_str = confs[4];
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/controller_ucc_listener.cpp: style: Variable 'bit_6_str' can be declared with const [constVariable]    auto &bit_6_str = confs[6];
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/controller_ucc_listener.cpp: style: Variable 'bit_5_str' can be declared with const [constVariable]    auto &bit_5_str = confs[7];
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/beerocks_master_main.cpp: style: Parameter 'main_master_conf' can be declared with const [constParameter]                               beerocks::config_file::sConfigMaster &main_master_conf)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/beerocks_master_main.cpp: style: Variable 'bridge_iface' can be declared with const [constVariable]    auto &bridge_iface = beerocks_slave_conf.bridge_iface;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/association_handling_task.cpp: performance: Function parameter 'sta_mac_' should be passed by const reference. [passedByValue]                                                     task_pool &tasks_, std::string sta_mac_,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/association_handling_task.cpp: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]                                                     std::string task_name_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/bml_task.cpp: style: C-style pointer casting [cstyleCast]            auto event_obj = (connection_change_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/bml_task.cpp: style: C-style pointer casting [cstyleCast]            auto event_obj = (stats_info_available_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/bml_task.cpp: style: C-style pointer casting [cstyleCast]            auto event_obj = (listener_general_register_unregister_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/bml_task.cpp: style: Local variable 'idx' shadows outer variable [shadowVariable]            int idx = 0;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/bml_task.cpp: style: Local variable 'sd' shadows outer variable [shadowVariable]            Socket *sd;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]        return -1;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_socket.cpp: performance: Function parameter 'temp_path_' should be passed by const reference. [passedByValue]cli_socket::cli_socket(std::string temp_path_, std::string proxy_ip_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_socket.cpp: performance: Function parameter 'proxy_ip_' should be passed by const reference. [passedByValue]cli_socket::cli_socket(std::string temp_path_, std::string proxy_ip_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/cli/beerocks_cli_socket.cpp: performance: Function parameter 'mode' should be passed by const reference. [passedByValue]                                      uint16_t repeats, int16_t op_class, std::string mode)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: The scope of the variable 'listener_exist' can be reduced. [variableScope]    bool listener_exist;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: Parameter 'n' can be declared with const [constParameter]int db::get_node_bw_int(std::shared_ptr<node> &n)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]            get_node_state(hostap) == beerocks::STATE_CONNECTED) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]        neighbors_al_macs.push_back(network_utils::mac_from_string(sibling));
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]        if (it.second.mac == mac) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: Variable '(*it).map_updates' is assigned a value that is never used. [unreadVariable]                (*it).map_updates = update_enable;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: Variable '(*it).stats_updates' is assigned a value that is never used. [unreadVariable]                (*it).stats_updates = update_enable;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/db/db.cpp: style: Variable '(*it).events_updates' is assigned a value that is never used. [unreadVariable]                (*it).events_updates = update_enable;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_actions.cpp: style: The scope of the variable 'prev_task_id' can be reduced. [variableScope]    int prev_task_id;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: warning: Member variable 'slave_thread::platform_settings' is not initialized in the constructor. [uninitMemberVar]slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: warning: Member variable 'slave_thread::wlan_settings' is not initialized in the constructor. [uninitMemberVar]slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: warning: Member variable 'slave_thread::son_config' is not initialized in the constructor. [uninitMemberVar]slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: warning: Member variable 'slave_thread::connected_4addr_mode' is not initialized in the constructor. [uninitMemberVar]slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: warning: Member variable 'slave_thread::hostap_params_available' is not initialized in the constructor. [uninitMemberVar]slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: warning: Member variable 'slave_thread::backhaul_params' is not initialized in the constructor. [uninitMemberVar]slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: warning: Member variable 'slave_thread::hostap_params' is not initialized in the constructor. [uninitMemberVar]slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: warning: Member variable 'slave_thread::hostap_cs_params' is not initialized in the constructor. [uninitMemberVar]slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_actions.cpp: style: Local variable 'prev_task_id' shadows outer variable [shadowVariable]        int prev_task_id = database.get_association_handling_task_id(mac);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_actions.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]                                                     std::string sta_mac, std::string bssid)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_actions.cpp: performance: Function parameter 'bssid' should be passed by const reference. [passedByValue]                                                     std::string sta_mac, std::string bssid)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: performance: Variable 'slave_uds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]    slave_uds   = conf.temp_path + std::string(BEEROCKS_SLAVE_UDS) + "_" + conf.hostap_iface;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_actions.cpp: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]            if (operating_class == operating_class_info.operating_class()) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/client_locating_task.cpp: performance: Function parameter 'client_mac_' should be passed by const reference. [passedByValue]                                           task_pool &tasks_, std::string client_mac_,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/client_locating_task.cpp: performance: Function parameter 'eth_switch_' should be passed by const reference. [passedByValue]                                           std::string eth_switch_, std::string task_name_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/client_locating_task.cpp: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]                                           std::string eth_switch_, std::string task_name_)
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: style: Local variable 'notification' shadows outer variable [shadowVariable]        auto notification = message_com::create_vs_message<
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_master_thread.cpp: style: Redundant initialization for 'interface'. The initialized value is overwritten before it is read. [redundantInitialization]                    auto interface = std::get<1>(interface_tuple);
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/son_slave_thread.cpp: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]        if (channel_to_check == ch.channel) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_master_thread.cpp: style: The scope of the variable 'old_link_metrics_removed' can be reduced. [variableScope]    bool old_link_metrics_removed = false;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_master_thread.cpp: style: Parameter 'link_metric_data' can be declared with const [constParameter]        &link_metric_data)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_master_thread.cpp: style: Parameter 'ap_metric_data' can be declared with const [constParameter]print_ap_metric_map(std::unordered_map<sMacAddr, son::node::ap_metrics_data> &ap_metric_data)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_master_thread.cpp: style: Variable 'ap_metric_data' can be declared with const [constVariable]    auto &ap_metric_data = database.get_ap_metric_data_map();
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_master_thread.cpp: style: Parameter 'm1' can be declared with const [constParameter]    WSC::m1 &m1, std::string bridge_mac, std::string radio_mac, ieee1905_1::CmduMessageTx &cmdu_tx)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/client_steering_task.cpp: performance: Function parameter 'sta_mac_' should be passed by const reference. [passedByValue]                                           task_pool &tasks_, std::string sta_mac_,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/client_steering_task.cpp: performance: Function parameter 'target_bssid_' should be passed by const reference. [passedByValue]                                           std::string target_bssid_, bool disassoc_imminent_,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/client_steering_task.cpp: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]                                           std::string task_name_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_master_thread.cpp: style: Variable 'old_link_metrics_removed' is assigned a value that is never used. [unreadVariable]            old_link_metrics_removed = true;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                acs_response_event = (sAcsResponse_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                csa_event    = (sCsa_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                restricted_channel_response_event = (sRestrictedChannelResponse_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                slave_joined_event = (sSlaveJoined_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                csa_event = (sCsa_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                hostap_channel_request_event = (sHostapChannelRequest_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                ap_activity_idle = (sApActivityIdle_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                    (sDfsReEntrySampleSteeredClients_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                dfs_cac_pending_hostap = (sDfsCacPendinghostap_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                    cac_completed_event = (sCacCompleted_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                dfs_channel_available = (sDfsChannelAvailable_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]                configured_restricted_channels = (sConfiguredRestrictedChannels_event *)event_obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]        auto new_event = CHANNEL_SELECTION_ALLOCATE_EVENT(sDfsReEntrySampleSteeredClients_event);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]            auto new_event        = CHANNEL_SELECTION_ALLOCATE_EVENT(sDfsCacPendinghostap_event);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: C-style pointer casting [cstyleCast]    auto new_event             = CHANNEL_SELECTION_ALLOCATE_EVENT(sDfsCacPendinghostap_event);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: Redundant initialization for 'hostap_parent_type'. The initialized value is overwritten before it is read. [redundantInitialization]        auto hostap_parent_type = database.get_node_type(hostap_parent_mac);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: The scope of the variable 'channel_80Mhz_step' can be reduced. [variableScope]    auto channel_80Mhz_step = CHANNEL_80MHZ_STEP;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]void channel_selection_task::queue_clear_mac(std::string mac)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: performance: Function parameter 'set_reentry_client' should be passed by const reference. [passedByValue]                 [&](std::string set_reentry_client) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/load_balancer_task.cpp: style: Variable 'client_efficiency_ratio' is reassigned a value before the old one has been used. [redundantAssignment]                client_efficiency_ratio =
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/load_balancer_task.cpp: style: The scope of the variable 'chosen_hostap_bytes_per_second_gained' can be reduced. [variableScope]        int chosen_hostap_bytes_per_second_gained = INT32_MIN;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/load_balancer_task.cpp: performance: Function parameter 'ire_mac_' should be passed by const reference. [passedByValue]                                       task_pool &tasks_, std::string ire_mac_,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/load_balancer_task.cpp: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]                                       std::string task_name_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]            if (database.is_hostap_backhaul_manager(sibling)) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/channel_selection_task.cpp: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]        if (database.is_node_5ghz(gw_slave)) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task_db.h: performance: Variable 'mac' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]            mac                     = mac_;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task_db.h: performance: Variable 'bssid' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]            bssid                   = beerocks::net::network_utils::mac_to_string(config_.bssid);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/dynamic_channel_selection_task.cpp: style: Redundant initialization for 'ret'. The initialized value is overwritten before it is read. [redundantInitialization]        auto ret = beerocks::eChannelScanErrCode::CHANNEL_SCAN_SUCCESS;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task_db.cpp: style: Parameter 'bssid' can be declared with const [constParameter]int32_t rdkb_wlan_task_db::get_group_index(const std::string &client_mac, std::string &bssid)
'/builds/prpl-foundation/prplMesh/framework/common/broker_interface.cpp: style: Parameter 'msg' can be declared with const [constParameter]void BrokerInterface::SyncSend(Message &msg)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/internal/bml_internal.cpp: performance: Function parameter 'beerocks_conf_path' should be passed by const reference. [passedByValue]int bml_internal::connect(const std::string beerocks_conf_path)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/internal/bml_internal.cpp: performance: Function parameter 'ssid' should be passed by const reference. [passedByValue]int bml_internal::set_wifi_credentials(const std::string ssid, const std::string pass, int sec,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/internal/bml_internal.cpp: performance: Function parameter 'pass' should be passed by const reference. [passedByValue]int bml_internal::set_wifi_credentials(const std::string ssid, const std::string pass, int sec,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/internal/bml_internal.cpp: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]int bml_internal::set_log_level(const std::string module_name, const std::string log_level,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/internal/bml_internal.cpp: performance: Function parameter 'log_level' should be passed by const reference. [passedByValue]int bml_internal::set_log_level(const std::string module_name, const std::string log_level,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/internal/bml_internal.cpp: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]                                uint8_t on, const std::string mac)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/internal/bml_internal.cpp: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]int bml_internal::set_restricted_channels(const uint8_t *restricted_channels, const std::string mac,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/bml/internal/bml_internal.cpp: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]int bml_internal::get_restricted_channels(uint8_t *restricted_channels, const std::string mac,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/network_health_check_task.cpp: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]                                                     std::string task_name_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/network_health_check_task.cpp: style: Redundant checking of STL container element existence before removing it. [redundantIfRemove]            if (suspected_dis_clients.find(pending_node) != suspected_dis_clients.end()) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/task.cpp: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]task::task(std::string task_name_, std::string node_mac)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/task.cpp: performance: Function parameter 'node_mac' should be passed by const reference. [passedByValue]task::task(std::string task_name_, std::string node_mac)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/task.cpp: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]void task::add_pending_mac(std::string mac, beerocks_message::eActionOp_CONTROL action_op)
'/builds/prpl-foundation/prplMesh/framework/common/encryption.cpp: style: struct member 'Anonymous1::emsk' is never used. [unusedStructMember]            uint8_t emsk[32];
'/builds/prpl-foundation/prplMesh/framework/common/encryption.cpp: style: Variable 'kdf_key_length.i' is assigned a value that is never used. [unreadVariable]    kdf_key_length.i = htonl(sizeof(keys.keys) * 8);
'/builds/prpl-foundation/prplMesh/framework/common/encryption.cpp: style: Variable 'kdf_iter.i' is assigned a value that is never used. [unreadVariable]        kdf_iter.i = htonl(iter);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/ire_network_optimization_task.cpp: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]                                                             std::string task_name_)
'/builds/prpl-foundation/prplMesh/framework/common/logger.cpp: style: Condition '!init_performed' is always true [knownConditionTrueFalse]    if (!init_performed) {
'/builds/prpl-foundation/prplMesh/framework/common/logger.cpp: performance: Function parameter 'logger_name' should be passed by const reference. [passedByValue]void Logger::Config::SetValuesFromJson(struct json_object *jlogger, std::string logger_name)
'/builds/prpl-foundation/prplMesh/framework/common/logger.cpp: style: The scope of the variable 'length' can be reduced. [variableScope]    int fd = -1, length = -1, i = 0, ret = 0;
'/builds/prpl-foundation/prplMesh/framework/common/logger.cpp: style: Variable 'length' is assigned a value that is never used. [unreadVariable]    int fd = -1, length = -1, i = 0, ret = 0;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: style: The scope of the variable 'dl_snr' can be reduced. [variableScope]                uint8_t dl_snr;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: style: The scope of the variable 'found_band_match' can be reduced. [variableScope]        bool found_band_match;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: style: Local variable 'it' shadows outer variable [shadowVariable]        for (auto it : hostap_candidates) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'sta_mac_' should be passed by const reference. [passedByValue]                                     task_pool &tasks_, std::string sta_mac_,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]                                     int starting_delay_ms_, std::string task_name_)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'temp_cross_hostaps' should be passed by const reference. [passedByValue]bool optimal_path_task::calculate_measurement_delay(std::set<std::string> temp_cross_hostaps,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'current_hostap' should be passed by const reference. [passedByValue]                                                    std::string current_hostap, std::string sta_mac)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]                                                    std::string current_hostap, std::string sta_mac)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'temp_cross_hostaps' should be passed by const reference. [passedByValue]bool optimal_path_task::ready_to_pick_optimal_path(std::set<std::string> temp_cross_hostaps,
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'current_hostap' should be passed by const reference. [passedByValue]                                                   std::string current_hostap, std::string sta_mac)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]                                                   std::string current_hostap, std::string sta_mac)
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Function parameter 'hostap_mac' should be passed by const reference. [passedByValue]                                                      std::string hostap_mac)
'/builds/prpl-foundation/prplMesh/framework/common/nng/socket.cpp: style: Parameter 'frame' can be declared with const [constParameter]bool SubSocket::Receive(Message::Frame &frame, int flags)
'/builds/prpl-foundation/prplMesh/framework/common/nng/socket.cpp: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]        totalLen += frame.len();
'/builds/prpl-foundation/prplMesh/framework/common/test/encryption_test.cpp: performance: Function parameter 'message' should be passed by const reference. [passedByValue]static bool check(int &errors, bool check, std::string message)
'/builds/prpl-foundation/prplMesh/framework/common/test/encryption_test.cpp: style: Variable 'key1_length' is assigned a value that is never used. [unreadVariable]    key1_length    = sizeof(key1);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: style: Variable 'parent_mac' is assigned a value that is never used. [unreadVariable]    std::string parent_mac = database.get_node_parent(node_mac);
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]                    potential_ap_iter++;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/optimal_path_task.cpp: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]                potential_ap_iter++;
'/builds/prpl-foundation/prplMesh/framework/common/test/poller_test.cpp: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]        rc = poller_.Remove(sub_);
'/builds/prpl-foundation/prplMesh/framework/common/test/poller_test.cpp: style: The scope of the variable 'rc' can be reduced. [variableScope]        int attempts = 0, max_attempts = 100, rc;
'/builds/prpl-foundation/prplMesh/framework/common/test/message_test.cpp: style: Local variable 'f1' shadows outer variable [shadowVariable]        mapf::Message::Frame f1;
'/builds/prpl-foundation/prplMesh/framework/common/test/socket_test.cpp: style: Parameter 'cfg' can be declared with const [constParameter]int start_broker(SocketTest::SocketTestConfig &cfg)
'/builds/prpl-foundation/prplMesh/framework/common/test/socket_test.cpp: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]                frames += f.str() + ", ";
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/common/utils/utils.cpp: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]void ltrim(std::string &str, std::string additional_chars)
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/common/utils/utils.cpp: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]void rtrim(std::string &str, std::string additional_chars)
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/common/utils/utils.cpp: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]void trim(std::string &str, std::string additional_chars)
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/common/utils/utils.cpp: style: Unused variable: return_string [unusedVariable]    std::string return_string;
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/linux/bpl_cfg.cpp: information: Skipping configuration 'PLATFORM_DB_PATH' since the value of 'PLATFORM_DB_PATH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]        in_conf_file.open(PLATFORM_DB_PATH);
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/linux/bpl_cfg.cpp: information: Skipping configuration 'PLATFORM_DB_PATH' since the value of 'PLATFORM_DB_PATH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]            MAPF_ERR("Failed oppening file " << PLATFORM_DB_PATH);
'/builds/prpl-foundation/prplMesh/framework/common/zmq/socket.cpp: style: Parameter 'frame' can be declared with const [constParameter]bool SubSocket::Receive(Message::Frame &frame, int flags)
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/test/bpl_test.cpp: portability: fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems. [fflushOnInputStream]        fflush(stdin);
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/test/bpl_test.cpp: portability: fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems. [fflushOnInputStream]            fflush(stdin);
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/uci/arp/bpl_arp.cpp: style: C-style pointer casting [cstyleCast]    arp_monitor *pArpMon = (arp_monitor *)ctx;
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/uci/cfg/bpl_cfg_uci.cpp: style: The scope of the variable 'scanf_res' can be reduced. [variableScope]        int scanf_res;
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/uci/dhcp/bpl_dhcp.cpp: style: struct member 'dhcp_event_request::data' is never used. [unusedStructMember]    char data[];
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/uci/arp/monitor/arp_monitor.cpp: style: The scope of the variable 'type' can be reduced. [variableScope]        unsigned short type;
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/uci/arp/monitor/arp_monitor.cpp: performance: Function parameter 'strIface' should be passed by const reference. [passedByValue]int arp_monitor::start(std::string strIface)
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/uci/cfg/bpl_cfg.cpp: style: The scope of the variable 'retVal' can be reduced. [variableScope]    int retVal = 0;
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/uci/cfg/bpl_cfg.cpp: style: Variable 'retVal' is assigned a value that is never used. [unreadVariable]    int retVal = 0;
'/builds/prpl-foundation/prplMesh/framework/platform/bpl/uci/arp/monitor/arp_monitor.cpp: style: Unused variable: ipv4_str [unusedVariable]        std::string ipv4_str;
'/builds/prpl-foundation/prplMesh/framework/external/easylogging/easylogging++.cc: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/cCmduHeader.cpp: style: C-style pointer casting [cstyleCast]    m_flags = (sFlags*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlv1905NeighborDevice.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlv1905NeighborDevice.cpp: style: C-style pointer casting [cstyleCast]    m_mac_al_1905_device = (sMacAl1905Device*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvAlMacAddressType.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvDeviceBridgingCapability.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvAutoconfigFreqBand.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvAutoconfigFreqBand.cpp: style: C-style pointer casting [cstyleCast]    m_value = (eValue*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvEndOfMessage.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvDeviceInformation.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvLinkMetricResultCode.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvMacAddress.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvLinkMetricResultCode.cpp: style: C-style pointer casting [cstyleCast]    m_value = (eValue*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvPushButtonEventNotification.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvPushButtonEventNotification.cpp: style: C-style pointer casting [cstyleCast]    m_media_type_list = (sMediaType*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvNon1905neighborDeviceList.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvLinkMetricQuery.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvReceiverLinkMetric.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvReceiverLinkMetric.cpp: style: C-style pointer casting [cstyleCast]    m_interface_pair_info = (sInterfacePairInfo*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvPushButtonJoinNotification.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSearchedRole.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSearchedRole.cpp: style: C-style pointer casting [cstyleCast]    m_value = (eValue*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSupportedRole.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSupportedRole.cpp: style: C-style pointer casting [cstyleCast]    m_value = (eValue*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSupportedFreqBand.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSupportedFreqBand.cpp: style: C-style pointer casting [cstyleCast]    m_value = (eValue*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvTransmitterLinkMetric.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvTransmitterLinkMetric.cpp: style: C-style pointer casting [cstyleCast]    m_interface_pair_info = (sInterfacePairInfo*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvWsc.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvVendorSpecific.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApCapability.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApCapability.cpp: style: C-style pointer casting [cstyleCast]    m_value = (sValue*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHeCapabilities.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHeCapabilities.cpp: style: C-style pointer casting [cstyleCast]    m_flags1 = (sFlags1*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHeCapabilities.cpp: style: C-style pointer casting [cstyleCast]    m_flags2 = (sFlags2*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/include/tlvf/test/tlvVarList.h: style: The function 'isPostInitSucceeded' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]        bool isPostInitSucceeded();
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApMetric.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHtCapabilities.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApMetric.cpp: style: C-style pointer casting [cstyleCast]    m_estimated_service_parameters = (sEstimatedService*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHtCapabilities.cpp: style: C-style pointer casting [cstyleCast]    m_flags = (sFlags*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp: style: C-style pointer casting [cstyleCast]    m_complex_list = (cInner*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp: style: C-style pointer casting [cstyleCast]    m_var1 = (cInner*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp: style: C-style pointer casting [cstyleCast]    m_var3 = (cInner*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp: style: C-style pointer casting [cstyleCast]    m_unknown_length_list = (cInner*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApVhtCapabilities.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApRadioIdentifier.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApVhtCapabilities.cpp: style: C-style pointer casting [cstyleCast]    m_flags1 = (sFlags1*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApVhtCapabilities.cpp: style: C-style pointer casting [cstyleCast]    m_flags2 = (sFlags2*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApMetricQuery.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvChannelPreference.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvChannelPreference.cpp: style: C-style pointer casting [cstyleCast]    m_flags = (sFlags*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApRadioBasicCapabilities.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvChannelSelectionResponse.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp: style: C-style pointer casting [cstyleCast]            auto event_obj = (listener_general_register_unregister_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp: style: C-style pointer casting [cstyleCast]            auto event_obj         = (steering_client_disconnect_request_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp: style: C-style pointer casting [cstyleCast]            auto event_obj = (steering_rssi_measurement_request_event *)obj;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp: style: C-style pointer casting [cstyleCast]        auto event_obj = (steering_slave_join_event *)obj;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvChannelSelectionResponse.cpp: style: C-style pointer casting [cstyleCast]    m_response_code = (eResponseCode*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvAssociatedClients.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApOperationalBSS.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp: style: The scope of the variable 'listener_exist' can be reduced. [variableScope]    bool listener_exist;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp: style: Local variable 'update' shadows outer variable [shadowVariable]            auto update = message_com::create_vs_message<
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientAssociationEvent.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientAssociationEvent.cpp: style: C-style pointer casting [cstyleCast]    m_association_event = (eAssociationEvent*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientInfo.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientAssociationControlRequest.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvErrorCode.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvErrorCode.cpp: style: C-style pointer casting [cstyleCast]    m_reason_code = (eReasonCode*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientAssociationControlRequest.cpp: style: C-style pointer casting [cstyleCast]    m_association_control = (eAssociationControl*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientCapabilityReport.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientCapabilityReport.cpp: style: C-style pointer casting [cstyleCast]    m_result_code = (eResultCode*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvOperatingChannelReport.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSearchedService.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvOperatingChannelReport.cpp: style: C-style pointer casting [cstyleCast]    m_operating_classes_list = (sOperatingClasses*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSearchedService.cpp: style: C-style pointer casting [cstyleCast]    m_searched_service_list = (eSearchedService*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSearchedService.cpp: style: Argument 'sizeof(eSearchedService)*(searched_service_list_length)' to function buffPtrIncrementSafe is always 0 [constArgument]    if (!buffPtrIncrementSafe(sizeof(eSearchedService) * (searched_service_list_length))) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvRadioOperationRestriction.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvRadioOperationRestriction.cpp: style: C-style pointer casting [cstyleCast]    m_channel_list = (sChannelInfo*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvHigherLayerData.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvHigherLayerData.cpp: style: C-style pointer casting [cstyleCast]    m_protocol = (eProtocol*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSteeringRequest.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSteeringRequest.cpp: style: C-style pointer casting [cstyleCast]    m_request_flags = (sRequestFlags*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSteeringRequest.cpp: style: C-style pointer casting [cstyleCast]    m_target_bssid_list = (sTargetBssidInfo*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSteeringBTMReport.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSupportedService.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSupportedService.cpp: style: C-style pointer casting [cstyleCast]    m_supported_service_list = (eSupportedService*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSupportedService.cpp: style: Argument 'sizeof(eSupportedService)*(supported_service_list_length)' to function buffPtrIncrementSafe is always 0 [constArgument]    if (!buffPtrIncrementSafe(sizeof(eSupportedService) * (supported_service_list_length))) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvTransmitPowerLimit.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/src/src/ClassList.cpp: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]        msg_len += c->getLen();
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp: style: Variable '(*it).events_updates' is assigned a value that is never used. [unreadVariable]                (*it).events_updates = update_enable;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/WSC/WSC_Attributes.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport.cpp: style: Local variable 'revents' shadows outer variable [shadowVariable]                auto revents = poller_.CheckEvent(network_interface.fd);
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_local_bus.cpp: style: C-style pointer casting [cstyleCast]        Ieee1905CmduHeader *ch = (Ieee1905CmduHeader *)packet.payload.iov_base;
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_local_bus.cpp: style: C-style pointer casting [cstyleCast]        Ieee1905CmduHeader *ch   = (Ieee1905CmduHeader *)packet.payload.iov_base;
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_local_bus.cpp: style: Parameter 'msg' can be declared with const [constParameter]void Ieee1905Transport::handle_local_bus_cmdu_tx_message(CmduTxMessage &msg)
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_local_bus.cpp: style: Parameter 'msg' can be declared with const [constParameter]    InterfaceConfigurationRequestMessage &msg)
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_packet_processing.cpp: style: C-style pointer casting [cstyleCast]        Ieee1905CmduHeader *ch = (Ieee1905CmduHeader *)packet.payload.iov_base;
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_packet_processing.cpp: style: C-style pointer casting [cstyleCast]    Ieee1905CmduHeader *ch = (Ieee1905CmduHeader *)packet.payload.iov_base;
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_packet_processing.cpp: style: C-style pointer casting [cstyleCast]                Ieee1905CmduHeader *ch = (Ieee1905CmduHeader *)packet.payload.iov_base;
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_packet_processing.cpp: style: Parameter 'packet' can be declared with const [constParameter]bool Ieee1905Transport::verify_packet(Packet &packet)
'/builds/prpl-foundation/prplMesh/framework/transport/ieee1905_transport/ieee1905_transport_network.cpp: style: The scope of the variable 'network_interface' can be reduced. [variableScope]        auto &network_interface = it->second;
'/builds/prpl-foundation/prplMesh/framework/tlvf/test/tlvf_test.cpp: style: The scope of the variable 'expected' can be reduced. [variableScope]            uint16_t expected = 0x0bb0;
'/builds/prpl-foundation/prplMesh/framework/tlvf/test/tlvf_test.cpp: style: Local variable 'cmplx' shadows outer variable [shadowVariable]        auto cmplx = std::get<1>(tlv4->complex_list(i));
'/builds/prpl-foundation/prplMesh/framework/tlvf/test/tlvf_test.cpp: style: Local variable 'cmplx' shadows outer variable [shadowVariable]            auto cmplx = std::get<1>(tlv4->complex_list(0));
'/builds/prpl-foundation/prplMesh/framework/tlvf/test/tlvf_test.cpp: style: Local variable 'cmplx' shadows outer variable [shadowVariable]            auto cmplx = std::get<1>(tlv4->complex_list(1));
'/builds/prpl-foundation/prplMesh/framework/tlvf/test/tlvf_test.cpp: style: Variable 'tlv1' is assigned a value that is never used. [unreadVariable]    auto tlv1 = msg.addClass<tlvNon1905neighborDeviceList>();
'/builds/prpl-foundation/prplMesh/framework/tlvf/test/tlvf_test.cpp: style: Variable 'tlv2' is assigned a value that is never used. [unreadVariable]    auto tlv2 = msg.addClass<tlvLinkMetricQuery>();
'/builds/prpl-foundation/prplMesh/framework/tlvf/test/tlvf_test.cpp: style: Variable 'tlv3' is assigned a value that is never used. [unreadVariable]    auto tlv3 = msg.addClass<tlvWsc>();
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_management.cpp: style: Variable 'result_status' is assigned a value that is never used. [unreadVariable]        auto result_status = eChannelScanErrCode::CHANNEL_SCAN_SUCCESS;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_management.cpp: style: Variable 'op_error_code' is assigned a value that is never used. [unreadVariable]        auto op_error_code = eChannelScanOpErrCode::CHANNEL_SCAN_OP_SUCCESS;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_management.cpp: style: Variable 'op_error_code' is assigned a value that is never used. [unreadVariable]            op_error_code = eChannelScanOpErrCode::CHANNEL_SCAN_OP_SCAN_IN_PROGRESS;
'/builds/prpl-foundation/prplMesh/controller/src/beerocks/master/son_management.cpp: style: Variable 'result_status' is assigned a value that is never used. [unreadVariable]            result_status = last_scan_success;
'/builds/prpl-foundation/prplMesh/agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.h: warning: Virtual function 'on_thread_stop' is called from destructor '~backhaul_manager()' at line 243. Dynamic binding is not used. [virtualCallInConstructor]    virtual void on_thread_stop() override;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvAssociatedStaLinkMetrics.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvAssociatedStaLinkMetrics.cpp: style: C-style pointer casting [cstyleCast]    m_bssid_info_list = (sBssidInfo*)m_buff_ptr__;
'/builds/prpl-foundation/prplMesh/framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvStaMacAddressType.cpp: style: The if condition is the same as the previous if condition [duplicateCondition]    if (m_parse__) {
